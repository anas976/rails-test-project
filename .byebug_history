continue
Sidekiq::Queue.new('high').size.positive?
Sidekiq::Queue.new('high').positive?
continue
queue.size != 0
continue
queue.size != 0
queue.size == 0
queue = Sidekiq::Queue.new('high')
Sidekiq::Queue.new('high').size
Sidekiq::Queue.new('high')
continue
a.size
a = Sidekiq::Queue.new('high')
continue
a.size
a = Sidekiq::Queue.new('high')
continue
a
a.size
a = Sidekiq::Queue.new('high')
Sidekiq::Queue.new('high')
Sidekiq::Queue.new('remaining')
Sidekiq::Queue["high"]
Sidekiq::Queue.entries
Sidekiq::Queue.entries.last
Sidekiq::Queue.new.entries.last
Sidekiq::ScheduledSet.new.entries.last
Sidekiq::ScheduledSet.new.entries.last.jid
Sidekiq::Queue::default.new.size
Sidekiq::Queue.new.size
Sidekiq::Queues.new.size
Sidekiq::Queue.new.size
Sidekiq::ScheduledSet.new.size
Sidekiq::ScheduledSet.new
 Sidekiq::Queue.new('high')
 Sidekiq:: Queue.new('high')
 Sidekiq:: Queue.new('remaining')
continue
Sidekiq::ScheduledSet.size
Sidekiq::ScheduledSet.new.size
continue
last_published_at
datetime
datetime - last_published_at).to_i >= 10
(datetime - last_published_at).to_i >= 10
continue
Rails.cache.fetch('last_published_at', expires_in: 10.seconds)
continue
Rails.cache.fetch('last_published_at', expires_in: 10.seconds)
continue
Rails.cache.fetch('last_published_at', expires_in: 10.seconds)
continue
last_published_at.nil?
continue
last_published_at.nil?
continue
last_published_at.nil?
continue
last_published_at.nil?
continue
Redis.current.publish('events', datetime.to_s)
datetime
Redis.current.publish('events', datetime.to_s)
Redis.current.publish
continue
